model.Semaine.methods.getWeeksArr = function(currDate, currMonth, currYear, numberOfWeeks, noChoice) {	//debugger;	// Recherche n semaines centrées sur une date 	var daysBefore = (Math.floor(numberOfWeeks / 2)) * 7;	var daysAfter = (Math.ceil(numberOfWeeks / 2)) * 7;	var d = new Date(currYear, currMonth, currDate);	var firstWeekDate = new Date(d);	var lastWeekDate = new Date(d);	var emptyDate = "";//new Date(0, 0, 0);	var weeksArr = [];	firstWeekDate.setDate(d.getDate() - daysBefore);	lastWeekDate.setDate(d.getDate() + daysAfter);			if (noChoice !== undefined) {		weeksArr.push({label: noChoice, ID: 0, dateDebut: emptyDate, dateFin: emptyDate});		}		var weeksColl = ds.Semaine.query("SE_Date_Fin >= :1 AND SE_Date_Debut <= :2", firstWeekDate, lastWeekDate);	weeksColl.forEach(function(week)	{		weeksArr.push({label: week.edgeDatesText, ID: week.SE_ID, dateDebut: week.SE_Date_Debut, dateFin: week.SE_Date_Fin});					});		//weeksArr = ds.Semaine.query("SE_Date_Fin >= :1 AND SE_Date_Debut <= :2", firstWeekDate, lastWeekDate).toArray("edgeDatesText, SE_ID, SE_Date_Debut, SE_Date_Fin");        return weeksArr;};model.Semaine.methods.getWeeksArr.scope = "public";model.Semaine.methods.getWeeksDates = function(currDate, currMonth, currYear, numberOfWeeks) {	//debugger;	//Recherche n semaines centrées sur une date 	//et retourne la date du début de la première semaine	//et la date de fin de la dernière semaine	var daysBefore = (Math.floor(numberOfWeeks / 2)) * 7,		daysAfter = (Math.ceil(numberOfWeeks / 2)) * 7,		d = new Date(currYear, currMonth, currDate),		firstWeekDate = new Date(d), 		lastWeekDate = new Date(d), //{},		datesObj = {};	firstWeekDate.setDate(d.getDate() - daysBefore);	lastWeekDate.setDate(d.getDate() + daysAfter);	datesObj.dateDebut = firstWeekDate;	datesObj.dateFin = lastWeekDate;		    return datesObj;};model.Semaine.methods.getWeeksDates.scope = "public";