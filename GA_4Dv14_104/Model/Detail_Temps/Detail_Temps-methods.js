model.Detail_Temps.collectionMethods.getTotalTime = function() {	return this.sum('DET_Temps');};model.Detail_Temps.collectionMethods.getTotalTime.scope = "public";model.Detail_Temps.collectionMethods.deleteSelected = function(theSelectedRows) {    var currentDTcollection = this;    var deleteError = 0;    //debugger;    theSelectedRows.forEach(function(rowNum) {        try        {            currentDTcollection[rowNum].remove();        }      	catch (err)      	{      		deleteError = err;      	}	});	return deleteError;};model.Detail_Temps.collectionMethods.deleteSelected.scope = "public";model.Detail_Temps.collectionMethods.dupliSelected = function(theSelectedRows, decal) {    var currentDTcollection = this,		dupliError = 0;		    //debugger;    //#TODO : //	dt.save( {//    	onError : function(err) {//			dupliError = err;        		//		}//    });        theSelectedRows.forEach(function(rowNum) {        try        {			//debugger;			var currSel = currentDTcollection[rowNum],				currSelDate = new Date(currSel.DET_Date),				currDecalDate = currSelDate,				dt = ds.Detail_Temps.createEntity();			ds.Detail_Temps.createEntity();			if (decal !== 0) {				currDecalDate.setDate(currSel.DET_Date.getDate() + decal);			}			dt.DET_Date = currDecalDate;			dt.DPI_ID = currSel.DPI_ID;					dt.save();		        }      	catch (err)      	{      		dupliError = err;      	}	});	return dupliError;};model.Detail_Temps.collectionMethods.dupliSelected.scope = "public";