model.Detail_Temps.collectionMethods.getTotalTime = function() {	return this.sum('DET_Temps');};model.Detail_Temps.collectionMethods.getTotalTime.scope = "public";model.Detail_Temps.collectionMethods.deleteSelected = function(theSelectedRows) {    var currentDTcollection = this;    var deleteError = 0;    //debugger;    theSelectedRows.forEach(function(rowNum) {        try        {            currentDTcollection[rowNum].remove();        }      	catch (err)      	{      		deleteError = err;      	}	});	return deleteError;};model.Detail_Temps.collectionMethods.deleteSelected.scope = "public";model.Detail_Temps.collectionMethods.dupliSelected = function(theSelectedRows, decal) {    var currentDTcollection = this;	var	dupliError = 0;		    //debugger;    //#TODO : //	dt.save( {//    	onError : function(err) {//			dupliError = err;        		//		}//    });        theSelectedRows.forEach(function(rowNum) {        try        {			//debugger;			var currSel = currentDTcollection[rowNum];			var	currSelDate = new Date(currSel.DET_Date);			var	currDecalDate = currSelDate;			var	dt = ds.Detail_Temps.createEntity();			ds.Detail_Temps.createEntity();			if (decal !== 0) {				currDecalDate.setDate(currSel.DET_Date.getDate() + decal);			}			dt.DET_Date = currDecalDate;			dt.DPI_ID = currSel.DPI_ID;					dt.save();		        }      	catch (err)      	{      		dupliError = err;      	}	});	return dupliError;};model.Detail_Temps.collectionMethods.dupliSelected.scope = "public";model.Detail_Temps.collectionMethods.print = function() {	function formatDateOnlyPrint (dateObject, dateFormat) {		var result = '';		var currDate = dateObject.getDate();		var currMonth = dateObject.getMonth();		currMonth++; // convert month 0-11 in 1-12 		var currYear = dateObject.getFullYear();					if ((dateFormat == undefined) || (dateFormat == 'dd/mm/yyyy')) {			result = (currDate < 10 ? '0' : '') + currDate + '/' + (currMonth < 10 ? '0' : '') + currMonth + '/' + currYear;		} else if (dateFormat == 'dd/mm') {			result = (currDate < 10 ? '0' : '') + currDate + '/' + (currMonth < 10 ? '0' : '') + currMonth;					}			return result;	};	function timeFloat2Str (timeFloat) {				var timeStr = "";		var integerPart = Math.floor(timeFloat);		var decimalPart = ((timeFloat % 1).toFixed(2)) * 1;								timeStr = integerPart + 'h';				if (decimalPart !== 0) {			decimalPart = Math.round(decimalPart * 60); //convertion de centièmes d'heures en minutes			timeStr += decimalPart; 		}		return timeStr;	};	function addDays (date, days) {	    var result = new Date(date);	    result.setDate(date.getDate() + days);	    return result;	};    var dtColl = this;	var htmlTitle = '';	var htmlSubTitle = '';	var htmlDetail = '';	var htmlFooter = '';	var htmlLineSpacer = '<p>&nbsp;<p>';	var currentDayOfWeek = -1;	var previousDayOfWeek = -1;	var dayArr = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];	var cumulDayTime = 0;	var cumulTotalTime = 0;	var currSession = currentSession();	var currUser = currSession.user;	var userFullName = currUser.fullName;	var firstDate= new Date();	var lastDate = new Date();	var intID = -1;	var intCount = 0;	var intFullName = '';	var intCode = '';	htmlDetail += '<table width="100%"border="0">';	//ligne d'entete avec titre des colonnes	htmlDetail += '<tr>'; // for each array element	htmlDetail += '<td><b>Jour</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>Client</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>Dossier</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>N°</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>Temps</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>Poste</b></td>';  //nouvelle colonne	htmlDetail += '<td><b>Observations</b></td>';  //nouvelle colonne	htmlDetail += '</tr>';	dtColl.forEach(function(dt) {        try        {			//debugger;			currentDayOfWeek = dt.DET_Date.getDay();			if (previousDayOfWeek == -1) { //premier tour de boucle	    		previousDayOfWeek = currentDayOfWeek;	    		firstDate = dt.DET_Date;				lastDate = dt.DET_Date;				intCount = 1;    			intID = dt.Lien_DPI_DT.INT_ID;    			intFullName = dt.Lien_DPI_DT.Lien_INT_DPI.fullName;	    		intCode = dt.Lien_DPI_DT.Lien_INT_DPI.INT_Code;			} else if (currentDayOfWeek !== previousDayOfWeek) { //changement de jour				htmlDetail += '<tr>'; // ligne cumul jour		        htmlDetail += '<td colspan ="4"></td>'; //espace vide		        htmlDetail += '<td><b>' + timeFloat2Str(cumulDayTime) + '</b></td>'; //cumul tepms jour		        htmlDetail += '<td colspan ="1"></td>'; //espace vide		        htmlDetail += '<td><b>Cumul journalier</b></td>'; //libellé cumul		        htmlDetail += '</tr>';		        htmlDetail += '<tr>'; // ligne cumul jour		        htmlDetail += '<td colspan ="7" height="20" ><hr noshade align="center"</td>'; // ligne séparation jour		        htmlDetail += '</tr>';  				lastDate = dt.DET_Date;                	previousDayOfWeek = currentDayOfWeek;	  			cumulTotalTime += cumulDayTime;				cumulDayTime = 0;				            } else {            	        	}			if (intID !== dt.Lien_DPI_DT.INT_ID) { //plusieurs intervenants dans la sélection    			intID = dt.Lien_DPI_DT.INT_ID;				intCount++;			}						cumulDayTime += dt.DET_Temps; 		    htmlDetail += '<tr>'; // for each array element		    htmlDetail += '<td>' + dayArr[currentDayOfWeek] + '&nbsp'+ formatDateOnlyPrint(dt.DET_Date, 'dd/mm') + '</td>'; // Jour		    htmlDetail += '<td>' + dt.Lien_DPI_DT.Lien_DOSPOS_DPI.Lien_DOS_DOSPOS.Lien_SOC_DOSPOS.SOC_RS_Courte + '</td>'; //Client		    htmlDetail += '<td>' + dt.Lien_DPI_DT.Lien_DOSPOS_DPI.Lien_DOS_DOSPOS.DOS_Libelle + '</td>'; //Dossier		    htmlDetail += '<td>' + dt.Lien_DPI_DT.Lien_DOSPOS_DPI.Lien_DOS_DOSPOS.DOS_Numero + '</td>'; //N°		    htmlDetail += '<td>' + dt.DET_heures + '</td>'; //Temps		    htmlDetail += '<td>' + dt.Lien_DPI_DT.Lien_DOSPOS_DPI.Lien_POS_DOSPOS.POS_Code + '</td>'; //Poste		    htmlDetail += '<td>' + dt.DET_Commentaire + '</td>'; //Observation		    htmlDetail += '</tr>';        }      	catch (err)      	{      		//      	}	});		htmlDetail += '<tr>'; // ligne cumul jour    htmlDetail += '<td colspan ="4"></td>'; //espace vide    htmlDetail += '<td><b>' + timeFloat2Str(cumulDayTime) + '</b></td>'; //cumul tepms jour    htmlDetail += '<td colspan ="1"></td>'; //espace vide    htmlDetail += '<td><b>Cumul journalier</b></td>'; //libellé cumul    htmlDetail += '</tr>';    htmlDetail += '<tr>'; // ligne cumul jour    htmlDetail += '<td colspan ="7" height="20" ><hr noshade align="center"</td>'; // ligne séparation jour    htmlDetail += '</tr>'; 	htmlDetail +='</table>';	cumulTotalTime += cumulDayTime;	//Pied	htmlFooter += '<h2 align="left"><b>Total Heures : ' + timeFloat2Str(cumulTotalTime) + '</b></h2>'; //cumul temps total	htmlFooter += '<div align="right">Edité le '+formatDateOnlyPrint(new Date(), 'dd/mm/yyyy')+' par '+userFullName + '</div>';	//Titre	if ((firstDate.getDay() == 1) && (lastDate <= addDays(firstDate, 7))) {		htmlTitle = '<h2><b>Semaine du ' + formatDateOnlyPrint(firstDate, 'dd/mm/yyyy') + ' au ' + formatDateOnlyPrint(lastDate, 'dd/mm/yyyy') + '</b></h2>';	} else if (firstDate == lastDate) {		htmlTitle = '<h2><b>Journée du ' + formatDateOnlyPrint(firstDate, 'dd/mm/yyyy') + '</b></h2>';	} else {		htmlTitle = '<h2><b>Période du ' + formatDateOnlyPrint(firstDate, 'dd/mm/yyyy') + ' au ' + formatDateOnlyPrint(lastDate, 'dd/mm/yyyy') + '</b></h2>';			}		//Sous-Titre	if (intCount = 1) {		htmlSubTitle += '<h2>'+ intFullName +'</h2>';		htmlSubTitle += '<h3>'+ intCode + '</h3>';	} else {		htmlSubTitle += '<h4>il y a ' + intCount + ' intervenants différents pour cette sélection !!!</h4>';		htmlSubTitle += '<h3></h3>';	}		html = htmlLineSpacer +  htmlTitle + htmlLineSpacer + htmlSubTitle + htmlLineSpacer + htmlDetail + htmlLineSpacer + htmlFooter;		return html;};model.Detail_Temps.collectionMethods.print.scope = "public";